on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
  linux-debug:
    name: Linux Debug
    runs-on: ubuntu-20.04

    env:
      CC: ccache gcc-10
      CXX: ccache g++-10
      TREAT_WARNINGS_AS_ERRORS: 1
      GEN: ninja

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build ccache

    - name: Build
      run: make debug

    - name: Test
      run: make unit

  format-check:
    name: Format Check
    runs-on: ubuntu-20.04

    env:
      CC: gcc-10
      CXX: g++-10
      GEN: ninja

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-format && sudo pip3 install cmake-format

    - name: Format Check
      run: |
        clang-format --version
        clang-format --dump-config
        make format-check-silent

  tidy-check:
    name: Tidy Check
    runs-on: ubuntu-20.04

    env:
      CC: gcc-10
      CXX: g++-10
      GEN: ninja
      TIDY_THREADS: 4

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-tidy && sudo pip3 install pybind11[global]

    - name: Tidy Check
      run: make tidy-check

  linux-python3:
    name: Python 3 Linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [auto, aarch64]
    needs: linux-debug

    env:
      CIBW_BUILD: 'cp38-*'
      CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
      CIBW_ARCHS_LINUX: ${{ matrix.arch }}
      CIBW_TEST_REQUIRES: 'pytest'
      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" && (pip install --prefer-binary "pyarrow>=3.0.0" || true)'
      CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
      SETUPTOOLS_SCM_NO_LOCAL: 'yes'
      TWINE_USERNAME: 'hfmuehleisen'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
   
    - uses: docker/setup-qemu-action@v1
      if: ${{ matrix.arch == 'aarch64' }}
      name: Set up QEMU

    - name: Install
      run: pip install cibuildwheel twine

    - name: Build
      run: |
        cd tools/pythonpkg
        python setup.py sdist
        mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
        cibuildwheel --output-dir wheelhouse duckdb_tarball
    
    - name: Remove dist for aarc64
      if: ${{ matrix.arch == 'aarch64' }}
      run: |
        uname -m
        cd tools/pythonpkg
        echo "########################## ls duckdb_tarball#####################"
        #ls duckdb_tarball
        echo "#################### deleting dist ######################"
        rm dist/duckdb-*.tar.gz
        echo "############ ls dist #########################"
        ls dist
        

    #- name: Deploy
     # run: |
      #  python scripts/asset-upload-gha.py duckdb_python_src.tar.gz=tools/pythonpkg/dist/duckdb-*.tar.gz
       # if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ ]] ; then
        #  twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl tools/pythonpkg/dist/duckdb-*.tar.gz
        #fi


  linux-python2:
    name: Python 2 Linux
    runs-on: ubuntu-20.04
    needs: linux-debug

    env:
      CIBW_BUILD: 'cp27-*'
      CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
      CIBW_TEST_REQUIRES: 'pytest'
      CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" '
      CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
      SETUPTOOLS_SCM_NO_LOCAL: 'yes'
      TWINE_USERNAME: 'hfmuehleisen'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install
      run: pip install cibuildwheel twine

    - name: Build
      run: |
        cd tools/pythonpkg
        python setup.py sdist
        mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
        cibuildwheel --output-dir wheelhouse duckdb_tarball


  linux-tarball:
    name: Python 3 Tarball
    runs-on: ubuntu-20.04
    needs: linux-debug

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install
      run: pip install numpy

    - name: Build
      run: |
        git archive --format zip --output test-tarball.zip HEAD
        mkdir duckdb-test-tarball
        mv test-tarball.zip duckdb-test-tarball
        cd duckdb-test-tarball
        unzip test-tarball.zip
        cd tools/pythonpkg
        export SETUPTOOLS_SCM_PRETEND_VERSION=0.2.2
        python3 setup.py install --user

  linux-nodejs:
    name: node.js Linux
    runs-on: ubuntu-20.04
    needs: linux-debug


    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup
      run: ./scripts/node_version.sh upload

    - name: Node 10
      run: ./scripts/node_build.sh 10

    - name: Node 12
      run: ./scripts/node_build.sh 12

    - name: Node 14
      run: ./scripts/node_build.sh 14

    - name: Node 15
      run: ./scripts/node_build.sh 15


  osx-nodejs:
    name: node.js OSX
    runs-on: macos-latest
    needs: linux-debug

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup
      run: ./scripts/node_version.sh

    - name: Node 10
      run: ./scripts/node_build.sh 10

    - name: Node 12
      run: ./scripts/node_build.sh 12

    - name: Node 14
      run: ./scripts/node_build.sh 14

    - name: Node 15
      run: ./scripts/node_build.sh 15

  linux-wasm-release:
    name: WebAssembly Release
    runs-on: ubuntu-20.04
    needs: linux-debug

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build Amalgamation
      run: python scripts/amalgamation.py

    - name: Setup
      run: ./scripts/wasm_configure.sh

    - name: Build Library Module
      run: ./scripts/wasm_build_lib.sh Release

    - name: Build Test Module
      run: ./scripts/wasm_build_test.sh Release

    - name: Test WASM Module
      run: node ./test/wasm/hello_wasm_test.js

    - name: Package
      run: |
        zip -j duckdb-wasm32-nothreads.zip ./.wasm/build/duckdb.wasm
        python scripts/asset-upload-gha.py duckdb-wasm32-nothreads.zip

    - uses: actions/upload-artifact@v2
      with:
        name: duckdb-wasm32-nothreads
        path: |
          duckdb-wasm32-nothreads.zip
